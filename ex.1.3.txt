; Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers.

(define (square x) (* x x))

(define (>= x y) (not (< x y)) )
(define (<= x y) (not (> x y)) )
; now we check `a` against the other members of the list. if it's larger then `b` or `c`, we define it as `largest-number`

; given 3, 5 and 7, we need to return 5 and 7.
if it's less than 

(define (largest-number j k l) 
  (cond (
         (and ( > j k ) 
              ( > j l )
         )
         j
        )
        (
         (and ( > k j ) 
              ( > k l )
         )
         k
        )
        (
         (and ( > l j ) 
              ( > l k )
         )
         l
        )
  )
)
; if a value is less than or equal the largest number, but more than another number in the list then by default is is the second largest of the three numbers.
(define (second-largest-number j k l o) 
  (cond (
         (and  (<= o j) (> j k ) (> j l ) )
        j
        )
        (
        ( and  (<= o k) (> k j) (> k l ) )
        k
        )
        ( 
        ( and  (<= o l) (> l k) (> l j ) )
        l
        )
  )
)


(define (sum-of-two-largest-squares) )

(define (largest-number j k l) (+ j k l)) 